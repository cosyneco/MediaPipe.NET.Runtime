name: Continuous Integration
on:
  push:
    branches:
      - master
    tags-ignore:
      - '*'
  pull_request:
    branches:
      - '*'
    tags-ignore:
      - '*'

env:
  PROJECT_NAME: Mediapipe.Net.Runtime
  PROTO_NAME: Mediapipe.Net.Framework.Protobuf
  PACKAGE_OUTDIR: ${{ github.workspace }}/out

jobs:
  build-protobuf:
    name: Build (Protobuf)
    runs-on: ubuntu-latest
    steps:
      - name: Cache Bazel directory
        uses: actions/cache@v3
        if: ${{ always() }}
        env:
          cache-name: bazel-cache
        with:
          path: ~/.cache/bazel
          key: ${{ env.cache-name }}-protobuf-dev

      - name: Cache build directory
        uses: actions/cache@v3
        env:
          cache-name: build-cache
        with:
          path: build
          key: ${{ env.cache-name }}-protobuf-dev

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET 6
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "6.0.x"

      - name: Setup Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          architecture: "x64"

      - name: Install Numpy
        run: pip install numpy

      - name: Build C# Protobuf sources
        run: python build.py build --protobuf -vv

      - name: Restore packages
        run: dotnet restore ${{ env.PROTO_NAME }}

      - name: Build project
        run: dotnet build ${{ env.PROTO_NAME }} --no-restore --configuration Release

      - name: Pack project
        run: dotnet pack ${{ env.PROTO_NAME }} --no-restore --no-build --configuration Release --output ${{ env.PACKAGE_OUTDIR }}

      - name: Upload Nuget package artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROTO_NAME }}-nuget
          path: ${{ env.PACKAGE_OUTDIR }}/*.nupkg

  build-runtime:
    name: Build (Runtime)
    runs-on: ${{ matrix.os.runner }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: Windows
            runner: windows-2019
            cache-path: C:/_bzl
          - name: Linux_CPU
            runner: ubuntu-latest
            cache-path: ~/.cache/bazel
          - name: Linux_GPU
            runner: ubuntu-latest
            cache-path: ~/.cache/bazel
          # - name: MacOS
          #   runner: macos-latest
          #   cache-path: ~/_bzl
    steps:
      - name: Cache Bazel directory
        uses: actions/cache@v3
        if: ${{ always() }}
        env:
          cache-name: bazel-cache
        with:
          path: ${{ matrix.os.cache-path }}
          key: ${{ matrix.os.runner }}-${{ env.cache-name }}-dev

      - name: Cache build directory
        uses: actions/cache@v3
        env:
          cache-name: build-cache
        with:
          path: build
          key: ${{ matrix.os.runner }}-${{ env.cache-name }}-dev

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup EGL (Linux, GPU)
        if: ${{ matrix.os.name == 'Linux_GPU' }}
        run: sudo apt update && sudo apt install libglfw3-dev libgles2-mesa-dev

      - name: Setup .NET 6
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "6.0.x"

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r25c
          local-cache: true

      - name: Setup Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          architecture: "x64"

      - name: Install Numpy
        run: pip install numpy

      - name: Build Native Library (*nix, CPU)
        if: ${{ matrix.os.name != 'Windows' && matrix.os.name != 'Linux_GPU' }}
        run: python build.py build --no-install --no-protobuf -c dbg --desktop cpu --opencv cmake_static -vv
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Build Native Library (Linux, GPU)
        if: ${{ matrix.os.name == 'Linux_GPU' }}
        run: python build.py build --no-install --no-protobuf -c dbg --desktop gpu --opencv cmake_static -vv
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Build Native Library (Windows, CPU)
        if: ${{ matrix.os.name == 'Windows' }}
        run: |
          echo "Setting PYTHON_BIN_PATH to python in PATH"
          $env:PYTHON_BIN_PATH=(Get-Command python).Path
          echo $env:PYTHON_BIN_PATH
          python build.py build --no-install --no-protobuf -c dbg --desktop cpu --opencv cmake_static -vv
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}

      - name: Upload Build Artifacts (${{ matrix.os.name }})
        uses: actions/upload-artifact@v2
        with:
          name: Build.${{ matrix.os.name }}
          path: build/

  pack-runtime:
    name: Pack (Runtime)
    needs: build-runtime
    runs-on: ubuntu-latest
    strategy:
      matrix:
        comp:
          - CPU
          - GPU
    steps:
      - name: Setup .NET 6
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "6.0.x"

      - name: Setup Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          architecture: "x64"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Windows build artifacts
        if: ${{ matrix.comp == 'CPU' }}
        uses: actions/download-artifact@v3
        with:
          name: Build.Windows
          path: build/
            
      - name: Download Linux (CPU) build artifacts
        if: ${{ matrix.comp == 'CPU' }}
        uses: actions/download-artifact@v3
        with:
          name: Build.Linux_CPU
          path: build/

      - name: Download Linux (GPU) build artifacts
        if: ${{ matrix.comp == 'GPU' }}
        uses: actions/download-artifact@v3
        with:
          name: Build.Linux_GPU
          path: build/

      # - name: Download MacOS build artifacts
      #   if: ${{ matrix.comp == 'CPU' }}
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: Build.MacOS
      #     path: build/

      - name: Install artifacts
        run: python build.py build --no-protobuf -vv

      - name: Restore packages
        run: dotnet restore ${{ env.PROJECT_NAME }}.${{ matrix.comp }}

      - name: Build project
        run: dotnet build ${{ env.PROJECT_NAME }}.${{ matrix.comp }} --no-restore --configuration Release

      - name: Pack project
        run: dotnet pack ${{ env.PROJECT_NAME }}.${{ matrix.comp }} --no-restore --no-build --configuration Release --output ${{ env.PACKAGE_OUTDIR }}

      - name: Upload Nuget package artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PROJECT_NAME }}-nuget
          path: ${{ env.PACKAGE_OUTDIR }}/*.nupkg

